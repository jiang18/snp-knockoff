from time import time
import numpy as np
from sklearn.linear_model import LogisticRegression

# PLINK raw file generated by --recode A
raw_file = "/home/wolftech/jjiang26/knockoff/10k/geno.raw"

# Use only every nth individual as training.
split_n = 3

# Use nearest m SNPs in each side (if possible) for predicting genotypes
ext = 100

# Min MAF
min_maf = 0.01

with open(raw_file) as f:
    header = f.readline().strip().split()

header = header[6:]
geno = np.loadtxt(raw_file, dtype='int8', skiprows=1, usecols=range(6, 6+len(header)))

maf = np.mean(geno[::split_n,], axis=0)/2.0
exclude = np.where(maf<min_maf)
geno = np.delete(geno, exclude, axis=1)

for i in exclude[0][::-1]:
    del header[i]

with open("extract.txt", "w") as file:
    file.writelines("%s\n" % item.rsplit('_', 1)[0] for item in header )

nsnp = geno.shape[1]
knock = geno.copy()

tp = time()
for i in range(nsnp):
    si = max(0, i-ext)
    ei = min(nsnp, i+ext)
    if i==0:
        X = geno[:,1:ei]
    elif i==nsnp-1:
        X = np.hstack((geno[:,si:i],knock[:,si:i]))
    else:
        X = np.hstack((geno[:,si:i],geno[:,(i+1):ei],knock[:,si:i]))
    X_train = X[::split_n,:]
    y_train = geno[::split_n,i]
    for j in [1e5, 100, 1, 0.01]:
        multinom = LogisticRegression(C=j, solver='newton-cg',multi_class='multinomial')
        multinom.fit(X_train, y_train)
        if multinom.n_iter_ < 100:
            break
        else:
            print("    SNP idx", i, "C", j, "not converged.")
    probs = multinom.predict_proba(X)
    knock[:,i] = [np.random.choice(multinom.classes_, p=prob) for prob in probs]
    if i % 10 == 0:
        print("SNP idx", i, "completed with", multinom.n_iter_, "iterations.")

print(time()-tp)

np.savetxt("knockoff.t.txt", knock.T, fmt="%d", delimiter=" ")
np.savetxt("geno.txt", geno, fmt="%d", delimiter=" ")
